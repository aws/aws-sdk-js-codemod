import { writeFile } from "fs/promises";
import { join } from "path";

import {
  CLIENT_NAMES,
  CLIENT_NAMES_MAP,
  CLIENT_PACKAGE_NAMES_MAP,
} from "../src/transforms/v2-to-v3/utils/config";

const generatedComment = `// This file is generated by scripts/generateNewClientTests.ts`;
const newClientsTestsFolder = join("src", "transforms", "v2-to-v3", "__fixtures__", "new-client");
const newClientTestsPath = join(__dirname, "..", newClientsTestsFolder);

const getGlobalImportInputContent = () => {
  let globalImportInputContent = `${generatedComment}\n`;

  globalImportInputContent += `import AWS from "aws-sdk";\n\n`;

  // Add new AWS.V2Client() for each client.
  for (const clientName of CLIENT_NAMES) {
    globalImportInputContent += `new AWS.${clientName}();\n`;
  }

  return globalImportInputContent;
};

const getClientNamesSortedByPackageName = () =>
  Object.keys(CLIENT_PACKAGE_NAMES_MAP).sort((a, b) =>
    CLIENT_PACKAGE_NAMES_MAP[a].localeCompare(CLIENT_PACKAGE_NAMES_MAP[b])
  );

const getGlobalImportOutputContent = () => {
  let globalImportOutputContent = `${generatedComment}\n`;

  // Add new import for each client sorted alphabetically by package name.
  for (const v2ClientName of getClientNamesSortedByPackageName()) {
    const v3ClientName = CLIENT_NAMES_MAP[v2ClientName];
    const v3ClientPackageName = `@aws-sdk/${CLIENT_PACKAGE_NAMES_MAP[v2ClientName]}`;
    globalImportOutputContent += `import { ${v3ClientName} } from "${v3ClientPackageName}";\n`;
  }

  globalImportOutputContent += `\n`;

  // Add new V3Client() for each client following v2 Client order.
  for (const v2ClientName of CLIENT_NAMES) {
    globalImportOutputContent += `new ${CLIENT_NAMES_MAP[v2ClientName]}();\n`;
  }

  return globalImportOutputContent;
};

(async () => {
  // overwrite `global-import.input.js`
  const globalImportInputPath = join(newClientTestsPath, `global-import.input.js`);
  await writeFile(globalImportInputPath, getGlobalImportInputContent());

  // overwrite `global-import.output.js`
  const globalImportOutputPath = join(newClientTestsPath, `global-import.output.js`);
  await writeFile(globalImportOutputPath, getGlobalImportOutputContent());
})();
